<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.springboot.project.domain.movie.MovieRepository">	
  	<select id="getChartAll" resultType="com.springboot.project.domain.movie.Movie"> <!-- 영화 목록 list read -->
  		select
			mm.mov_idn,
			mm.mov_photo,
			mm.mov_title,
			mm.mov_release,
			mm.mov_viewCnt,
			mm.mov_rat,
			mm.mov_rat_cnt,
			mm.mov_lik,
			mm.mov_lik_cnt,
			mm.number,
			ml.mov_idn as like_mov_idn,
			ml.number as like_number,
			mr.mov_idn as rating_mov_idn,
			mr.number as rating_number,
			mr.rating as rating_rating
		from
			movie_mst mm
			LEFT OUTER JOIN movie_like ml ON(ml.mov_idn = mm.mov_idn AND ml.number = 1)
			LEFT OUTER JOIN movie_rating mr ON(mr.mov_idn = mm.mov_idn AND mr.number = 1)
		WHERE
			mm.mov_rat 
		ORDER BY 
			mm.mov_rat desc
		LIMIT
			10
  		
  	</select>
  	
  	<select id="getChartAllTop" resultType="com.springboot.project.domain.movie.Movie"> <!-- 영화 목록 list read -->
  		select
  			mm.mov_idn,
  			mm.mov_photo,
  			mm.mov_title,
  			mm.mov_release,
  			mm.mov_viewCnt,
  			mm.mov_rat,
  			mm.mov_rat_cnt,
  			mm.mov_lik,
  			mm.mov_lik_cnt,
  			mm.number,
  			ml.mov_idn as like_mov_idn,
  			ml.number as like_number,
  			mr.mov_idn as rating_mov_idn,
  			mr.number as rating_number,
  			mr.rating as rating_rating
  		from
  			movie_mst mm
			LEFT OUTER JOIN movie_like ml ON(ml.mov_idn = mm.mov_idn AND ml.number = #{number})
			LEFT OUTER JOIN movie_rating mr ON(mr.mov_idn = mm.mov_idn AND mr.number = #{number})
		order by
			mm.mov_idn;
  		
  	</select>
  	
  	
  	<select id="getMovieDtl" parameterType="com.springboot.project.web.dto.movie.MovieDtlRespDto" resultType="com.springboot.project.web.dto.movie.MovieDtlRespDto"> <!-- 개별 영화 list read -->
  		SELECT
			mm.mov_idn,
			mm.mov_photo,
			mm.mov_title,
			mm.mov_rat,
			mm.mov_release,
			mm.mov_gnr1,
			mg1.genre AS mg_genre1,
			mm.mov_gnr2,
			mg2.genre AS mg_genre2,
			mm.mov_gnr3,
			mg3.genre AS mg_genre3,
			md.mov_trailer,
			md.mov_age,
			md.mov_runtime,
			md.mov_story,
			md.mov_director,
			md.mov_actor,
			md.mov_actorchar,
			wl.mov_idn AS wl_mov_idn,
			wl.number,
			ml.number AS like_number,
			mr.number AS rating_number,
			mr.rating AS rating_rating
		FROM
			movie_mst mm
			LEFT OUTER JOIN movie_genre mg1 ON(mg1.gen_num = mm.mov_gnr1)
			LEFT OUTER JOIN movie_genre mg2 ON(mg2.gen_num = mm.mov_gnr2)
			LEFT OUTER JOIN movie_genre mg3 ON(mg3.gen_num = mm.mov_gnr3)
			LEFT OUTER JOIN movie_dtl md ON(md.mov_idn = mm.mov_idn)
			LEFT OUTER JOIN watch_list wl ON(wl.mov_idn = mm.mov_idn AND wl.number = #{number})
			LEFT OUTER JOIN movie_like ml ON(ml.mov_idn = mm.mov_idn AND ml.number = #{number})
			LEFT OUTER JOIN movie_rating mr ON(mr.mov_idn = mm.mov_idn AND mr.number = #{number}) 
		WHERE
			mm.mov_idn = #{mov_idn};
  	</select>
  	
  	<select id="getMovieLike" parameterType="com.springboot.project.web.dto.movie.MovieDtlRespDto" resultType="com.springboot.project.web.dto.movie.MovieDtlRespDto"> <!-- 개별 영화 list read -->
  		SELECT
			mm.mov_idn,
			mm.mov_photo,
			mm.mov_title,
			mm.mov_rat,
			mm.mov_release,
			mm.mov_gnr1,
			mg1.genre AS mg_genre1,
			mm.mov_gnr2,
			mg2.genre AS mg_genre2,
			mm.mov_gnr3,
			mg3.genre AS mg_genre3,
			md.mov_age,
			md.mov_runtime,
			md.mov_story,
			md.mov_director,
			md.mov_actor,
			md.mov_actorchar,
			ml.mov_idn AS ml_mov_idn,
			ml.number AS like_number

		FROM
			movie_like ml
			LEFT OUTER JOIN movie_mst mm ON(mm.mov_idn = ml.mov_idn)
			LEFT OUTER JOIN movie_dtl md ON(md.mov_idn = ml.mov_idn)
			LEFT OUTER JOIN movie_genre mg1 ON(mg1.gen_num = mm.mov_gnr1)
			LEFT OUTER JOIN movie_genre mg2 ON(mg2.gen_num = mm.mov_gnr2)
			LEFT OUTER JOIN movie_genre mg3 ON(mg3.gen_num = mm.mov_gnr3)

		WHERE
			ml.number = #{number};
  	</select>
 
 	
  	
  	
  	<select id="getChartAllDesc" resultType="com.springboot.project.domain.movie.Movie"> <!-- 영화 목록 list read -->
  		select
  			mov_idn,
  			mov_photo,
  			mov_title,
  			mov_release,
  			mov_viewCnt,
  			mov_gnr1,
  			mov_gnr2,
  			mov_gnr3,
  			mov_rat,
  			'0',
  			'0',
  			mov_lik_cnt,
  			'0',
  			'0',
  			'0',
  			'0'
  			
  		from
  			movie_mst
  		order by
  			mov_idn desc
  	</select>
  	
  	<select id="getChartAllRelease" resultType="com.springboot.project.domain.movie.Movie"> <!-- 영화 목록 list read -->
  		select
  			mm.mov_idn,
  			mm.mov_photo,
  			mm.mov_title,
  			mm.mov_release,
  			mm.mov_viewCnt,
  			mm.mov_rat,
  			mm.mov_rat_cnt,
  			mm.mov_lik,
  			mm.mov_lik_cnt,
  			mm.number,
  			ml.mov_idn as like_mov_idn,
  			ml.number as like_number,
  			mr.mov_idn as rating_mov_idn,
  			mr.number as rating_number,
  			mr.rating as rating_rating
  			
  			
  		from
  			movie_mst mm
			LEFT OUTER JOIN movie_like ml ON(ml.mov_idn = mm.mov_idn AND ml.number = #{number})
			LEFT OUTER JOIN movie_rating mr ON(mr.mov_idn = mm.mov_idn AND mr.number = #{number})
  		order by
  			mm.mov_release;
  	</select>
  	
  	
  	<select id="getChartAllReleaseDesc" resultType="com.springboot.project.web.dto.movie.MainChartDto"> <!-- 영화 목록 list read -->
  		select
  			mov_idn,
  			mov_photo,
  			mov_title,
  			mov_release,
  			mov_viewCnt,
  			mov_gnr1,
  			mov_gnr2,
  			mov_gnr3,
  			mov_rat,
  			'0',
  			'0',
  			mov_lik_cnt,
  			'0',
  			'0',
  			'0',
  			'0'
  			
  		from
  			movie_mst
  		order by
  			mov_release desc
  	</select>
  	
  	<select id="getChartAllLike" resultType="com.springboot.project.web.dto.movie.MainChartDto"> <!-- 영화 목록 list read -->
  		select
  			mm.mov_idn,
  			mm.mov_photo,
  			mm.mov_title,
  			mm.mov_release,
  			mm.mov_viewCnt,
  			mm.mov_rat,
  			mm.mov_rat_cnt,
  			mm.mov_lik,
  			mm.mov_lik_cnt,
  			mm.number,
  			ml.mov_idn as like_mov_idn,
  			ml.number as like_number,
  			mr.mov_idn as rating_mov_idn,
  			mr.number as rating_number,
  			mr.rating as rating_rating
  			
  			
  		from
  			movie_mst mm
			LEFT OUTER JOIN movie_like ml ON(ml.mov_idn = mm.mov_idn AND ml.number = #{number})
			LEFT OUTER JOIN movie_rating mr ON(mr.mov_idn = mm.mov_idn AND mr.number = #{number})
  		order by
  			mm.mov_lik_cnt desc;
  	</select>
  	<select id="getChartAllLikeDesc" resultType="com.springboot.project.web.dto.movie.MainChartDto"> <!-- 영화 목록 list read -->
  		select
  			mov_idn,
  			mov_photo,
  			mov_title,
  			mov_release,
  			mov_viewCnt,
  			mov_gnr1,
  			mov_gnr2,
  			mov_gnr3,
  			mov_rat,
  			'0',
  			'0',
  			mov_lik_cnt,
  			'0',
  			'0',
  			'0',
  			'0'
  			
  		from
  			movie_mst
  		order by
  			mov_lik_cnt desc
  	</select>
  	
	<insert id="plusLikeCnt" parameterType="com.springboot.project.web.dto.movie.MovieLikeDto"> 
	insert into
		movie_like
	values(
		#{mov_idn},
		#{number}
	)		
  	</insert>

  	<delete id="minusLikeCnt" parameterType="com.springboot.project.web.dto.movie.MovieLikeDto"> 
	delete
	from
		movie_like
	where
		mov_idn = #{mov_idn} AND number = #{number};
  	</delete>
  	
  	<insert id="insertRatingCnt" parameterType="com.springboot.project.web.dto.movie.MovieRatingDto"> 
	insert into
		movie_rating
	values(
		#{mov_idn},
		#{number},
		#{rating}
	);
  	</insert>
  	
  	<update id="updateRatingCnt" parameterType="com.springboot.project.web.dto.movie.MovieRatingDto"> 
	update
		movie_rating
	set
		rating = #{rating}
	where
		mov_idn = #{mov_idn} AND number = #{number};
  	</update>
  	
  	<delete id="deleteRatingCnt" parameterType="com.springboot.project.web.dto.movie.MovieRatingDto"> 
	delete
	from
		movie_rating
	where
		mov_idn = #{mov_idn} AND number = #{number};
  	</delete>
  	
  	<!-- 장르차트 -->
  	<select id="getGenreAll" resultType="com.springboot.project.domain.movie.MovieDtl"> <!-- 영화 목록 list read -->
  		select
  			mm.mov_idn,
  			mm.mov_photo,
  			mm.mov_title,
  			mm.mov_release,
  			mm.mov_rat,
  			mm.mov_lik_cnt,
  			md.mov_trailer,
  			md.mov_age,
  			md.mov_runtime,
  			md.mov_story,
  			md.mov_director,
  			md.mov_actor,
  			md.mov_actorchar,
  			md.mov_gross,
  			mr.mov_idn as rating_mov_idn,
  			mr.number as rating_number,
  			mr.rating as rating_rating
  			
  		from
  			movie_mst mm
			LEFT OUTER JOIN movie_dtl md ON(md.mov_idn = mm.mov_idn)
			LEFT OUTER JOIN movie_rating mr ON(mr.mov_idn = mm.mov_idn AND mr.number = #{number})
		order by
			mm.mov_idn;
  		
  	</select>
 
	
</mapper>